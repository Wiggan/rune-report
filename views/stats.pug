extends template.pug

block content
    script(src='https://code.jquery.com/jquery-3.6.0.js')
    script(src='https://code.jquery.com/ui/1.13.0/jquery-ui.js')
    link(rel='icon' type='image/x-icon' href='/ber.png')
    link(rel='icon' type='image/x-icon' href='/cham.png')
    link(rel='icon' type='image/x-icon' href='/gul.png')
    link(rel='icon' type='image/x-icon' href='/ist.png')
    link(rel='icon' type='image/x-icon' href='/jah.png')
    link(rel='icon' type='image/x-icon' href='/lo.png')
    link(rel='icon' type='image/x-icon' href='/mal.png')
    link(rel='icon' type='image/x-icon' href='/ohm.png')
    link(rel='icon' type='image/x-icon' href='/sur.png')
    link(rel='icon' type='image/x-icon' href='/vex.png')
    link(rel='icon' type='image/x-icon' href='/zod.png')

    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css')
    script.
        $( function() {
            $( "#tabs" ).tabs({"classes":{
                "ui-tabs": "d2tabs",
                "ui-tabs-nav": "d2tabs",
                "ui-tabs-tab": "d2tabs",
                "ui-tabs-panel": "d2tabs"
        }});
        });
        $( function() {

        
        var title = "Runometer: <br> HRs last 72 hours<br>Highscore: #{runometer_high_score}";

        var data = [
        {
            domain: { x: [0, 1], y: [0, 1] },
            value: #{runometer_value},
            title: { text: title },
            type: "indicator",
            mode: "gauge+number",
            delta: { reference: 1 },
            gauge: { axis: { range: [null, 10] },
                steps: [
                {'range': [0, 0.5], 'color': '#000'},
                {'range': [0.5, 1], 'color': '#040404'},
                {'range': [1, 1.5], 'color': '#060606'},
                {'range': [1.5, 2], 'color': '#080808'},
                {'range': [2, 2.5], 'color': '#111'},
                {'range': [2.5, 3], 'color': '#121'},
                {'range': [3, 3.5], 'color': '#131'},
                {'range': [3.5, 4], 'color': '#141'},
                {'range': [4, 4.5], 'color': '#241'},
                {'range': [4.5, 5], 'color': '#341'},
                {'range': [5, 5.5], 'color': '#441'},
                {'range': [5.5, 6], 'color': '#541'},
                {'range': [6, 6.5], 'color': '#641'},
                {'range': [6.5, 7], 'color': '#741'},
                {'range': [7, 7.5], 'color': '#841'},
                {'range': [7.5, 8], 'color': '#941'},
                {'range': [8, 8.5], 'color': '#A41'},
                {'range': [8.5, 9], 'color': '#B41'},
                {'range': [9, 9.5], 'color': '#C41'},
                {'range': [9.5, 10], 'color': '#D41'},
                ],
                'bar': {'color': "green"},
                }
        }
        ];

        var layout = {
            width: 400,
            height: 400,
            paper_bgcolor:'rgba(0,0,0,0)',
            plot_bgcolor:'rgba(0,0,0,0)'
        };
        
        Plotly.newPlot('runometer', data, layout);

        });

        runes_per_season = !{JSON.stringify(runes_per_season)};

        traces = [];

        for (const [key, value] of Object.entries(runes_per_season)) {
            trace = {x:[],
                     y:[],
                    type: 'scatter',
                    name: 'season ' + key
            }
            var current_sum = 0;
            trace.y.push(0);
            trace.x.push(0);
            value.forEach(function(element) {
                current_sum += element.rune_value;
                trace.y.push(current_sum);
                trace.x.push(element.time_delta)
            });
            traces.push(trace);
        }

        const runes_per_day = !{current_season_rune_value}/!{days_into_season};

        const extrapolation = {
            x:[!{days_into_season}, 90],
            y:[!{current_season_rune_value}, runes_per_day*(90-!{days_into_season})+!{current_season_rune_value}],
            name: 'rune precipitation prognosis',
            opacity: 0.25,
        }
        traces.push(extrapolation);

        var lineplot_layout = {

            title: 'Cumulative rune value per season',
            xaxis: {
                title: 'Time in days',
            },
            yaxis: {
                title: 'Total rune found rune value',
            },
            paper_bgcolor:'rgba(0,0,0,0)',
            plot_bgcolor:'rgba(0,0,0,0)'
        };

        $( function() {
            Plotly.newPlot('season_plot', traces, lineplot_layout);
        });
        
    h1 Rune stats
    div#tabs
        ul 
            li
                a(href="#tabs-1") All runes
            li
                a(href="#tabs-2") Charts
            li
                a(href="#tabs-3") Rune frequency
        div#tabs-1
            table
                tr
                    td
                        table()#all_runes_table
                            each rune_finding in all_runes
                                tr(class=(rune_finding.runometer_finding ? 'runometer_finding' : ''))
                                    td
                                        img(src='/'+ rune_finding.rune_name.toLowerCase() +'.png', width=32, height=32)
                                    td
                                        p #{rune_finding.rune_name}  
                                    td
                                        p #{rune_finding.player_name}
                                    td
                                        p #{rune_finding.finding_date}
                    td(valign='top')
                        h3(style="text-align: center")!= (runometer_value == runometer_high_score ? 'Highscore!!' : '')
                        div#runometer
                        
                            
        div#tabs-2
            div#season_plot
        div#tabs-3
            h4 Runes found this season:
            
            table
                each t in runes_table
                    tr(class=('runometer_finding'))
                        td
                            img(src='/'+ t.rune_name.toLowerCase() +'.png', width=32, height=32)
                        td
                            p #{t.rune_name}
                        td 
                            p #{t.rune_count}